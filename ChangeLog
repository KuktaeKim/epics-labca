Changes since labca_2_1_beta (T.S):
        2007/6/1 (TS):
        - Some changes to CONFIG/RELEASE/RULES for automatically finding the
          correct mex-file extension. Also, EPICS_HOST_ARCH-specific settings
          for the EPICS_BASE, MATLABDIR + SCILABDIR variables were implemented.
          (Backport from head revision).
	2007/6/1 (TS):
	- braindamaged win$$ doesn't implement c99 types -- use epicsTypes.h
	  instead.
	2007/5/9 (TS):
	- use c99 types int8_t, int16_t, int32_t rather than char, short, int.
	  (multiEzca.c; see also change made 2006/9/1).
	2007/5/8 (TS):
	- lcaPutNoWait() would not flush out commands (thanks to Greg Portman
	  for reporting).
	2007/4/11 (TS):
	- scilab got stuck when initializing labca in non-windowing mode (-nw).
	  This was because we still checked the X loop in ctrlC-polled.c.
	  Now we use checkevts_() to find out if we have should work the X loop.
	2007/4/10 (Jim Sebek):
	- attempts to mcc-compile matlab scripts that use labCA had failed
	  apparently because the help (.m) files are in the same directory
	  as the respective mex object files.
	  Jim found a work-around that tests if a compilation is in progress
	  and which skips labca initialization if this is the case.
	2006/12/19 (TS):
	- mexLock() glue and CA libraries so that EPICS is not shut down
	  as a result of matlab 'clear' operations [epics shutdown -> exit()].
	2006/9/1 (TS):
	- ezcaLong is really 32bit, i.e., I fixed multiEzca.c to use 'int'
	  instead of 'long' which is correct on 32bit and 64bit platforms.

Changes since labca_2_0_alpha (T.S):
    2006/4/14 (TS):
    - scilab now also uses polled 'ctrlC' handling (undocumented
      'isbrk() and inibrk()' routines.
    - changed shutdown procedure. This is still a pain and I don't
      understand exactly what needs to be done to avoid crashing
      the app on exit. Current solution seems to work on all
      platforms for both scilab and matlab.
    2006/4/11 (TS):
    - upgraded to 3.14(.8.2)-style Makefiles.
    2006/4/10 (TS):
    - ezcaEndGroupWithReport() used to clear out unconnected channels
      assuming that the disconnected state was a result of a failing
      search_and_connect(). We now clear only channels that never were
      successfully connected and leave other ones alone. This allows
      monitors to pick up seamlessly after IOC reboots.
    - disallow implicit mapping of native type -> FLOAT for monitors.
      (The old behavior let disconnected channels look for a FLOAT
      type monitor. We now let lcaNewMonitorValue() report -10 if
      asking for the native type of a disconnected channel).
    2006/2/17 (TS):
    - we now use (undocumented) MATLAB 'utHandlePendingInterrupt()' to poll
      for pending 'Ctrl-C' rather than hacking into the windows event loop.
      Our hack didn't work with matlab 7.2(?)/win32 anymore.
    2005/6/7 (TS):
	- flush output buffers (lcaPutNoWait())
Changes since labca_1_5 (T.S):
    2004/3/24 (TS):
	- EZCA modifications:
       o try to recycle work nodes marked as 'trashme'.
       o assume ca_clear_channel() does real cleanup (i.e. assume
		 it cancels scheduled callbacks) and hence recycle channel
         structures from push_channel(). Also, have push_channel()
         remove deleted channels from the hash table.
       o call clean_and_push_channel() if search attempts timeout:
         probably, the PV name is invalid and we want to prevent 3.14 
         background tasks to continue searching.
       o provide 'ezcaClearChannel()' and 'ezcaPurge()' to let the user
		 explititely remove unneeded channels.
    - provide 'lcaClear()'.
	- Provided 'lcaPutNoWait()' for setting values without waiting for
      record processing to complete on the server.
Changes since labca_1_5pre_beta (T.S):
	- set shared library version numbers in anticipation of future
      releases.
Changes since labca_1_4_beta (T.S):
	2004/3/8 (TS):
	- Have the matlab version call 'errMsgTxt()' on error to 
      trigger the standard way of error flagging. I finally
      found the reason for the linux crashes (matlab ships with outdated
      system libraries) ;-)
    - Implemented a workaround in ezErr() -- Scilab's mexPrintf()
      [i.e. sciprint] crashed when munging long strings (multi-line
      errors). We now break those messages up in smaller chunks...
    - multi_ezca_put() now returns a value to indicate error status
      (rval == number of successfully written PVs, -1 on error).
Changes since labca_1_3_beta:
	2004/2/20: T.S added matlab implementation of lcaGetStatus()
	2004/2/20: T.S added this ChangeLog
